import std::cmp::(Equal)
import std::fmt
import std::test::(Test, Failure)
import debug_ext::(format)

# Extend the Test class with some extra assertions that I find useful.
# I am patching Test here as I think these extensions could be useful
# in the standard library or an auxilliary test library beyond this
# project.
impl Test {
  # Asserts that the given string contains the expected string
  fn pub mut string_contains(container: ref String, contained: ref String) {
    if (container.contains?(contained)) { return }

    @failures.push(Failure.new(container.clone(), "should contain {contained}"))
  }


  # Asserts that the given closure throws the expected value.
  #
  # Different from std::throw in that it asserts that the expected value is thrown
  fn pub mut throws[T, E: Equal[E] + fmt::Format](expected: E, block: fn () -> Result[T, E]) {
    match block.call {
      case Ok(got) -> @failures.push(Failure.new('no value is thrown', "{format(expected)} to be thrown"))
      case Error(got) -> {
        if (got == expected) { return }
        @failures.push(Failure.new("threw {format(got)}", "to throw {format(expected)}"))
      }
    }
  }

  # Asserts that the given option is None
  fn pub mut none[T: fmt::Format](value: Option[T]) {
    if (value.some?) {
      @failures.push(Failure.new(format(value), 'Option.None'))
    }
  }

  # Asserts that the given option is Some
  fn pub mut some[T: fmt::Format](value: Option[T]) {
    if (value.none?) {
      @failures.push(Failure.new(format(value), 'Option.Some'))
    }
  }
  #
  # Asserts that the given result is ok
  fn pub mut ok[T, E](value: Result[T, E]) {
    if (value.error?) {
      @failures.push(Failure.new('To be Result.Ok', 'Result.Error'))
    }
  }
}
